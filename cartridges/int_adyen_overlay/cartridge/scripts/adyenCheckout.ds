/**
* Passes on credit card details to Adyen using the Adyen PAL adapter
* Receives a response and sets the order status accordingly
* created on 23dec2014
*
* @input Order : dw.order.Order
* @input Amount : dw.value.Money The amount to authorize
* @input PaymentInstrument : dw.order.PaymentInstrument
* @input CurrentSession : dw.system.Session
* @input CurrentRequest : dw.system.Request
* @input CreditCardForm : dw.web.Form
* @input SaveCreditCard : Boolean
*
* @output Decision : String
* @output PaymentStatus : String
* @output AuthorizationCode :  String
* @output AuthorizationAmount : String
* @output PaRequest : String
* @output PspReference : String
* @output MD : String
* @output ResultCode : String
* @output IssuerUrl : String
* @output AVSResultCode : String
* @output AdyenErrorMessage : String
* @output AdyenAmount : String
* @output AdyenCardType : String
*
*/

/* API Includes */
var Logger = require('dw/system/Logger');
var URLUtils = require('dw/web/URLUtils');

/* Script Modules */
var AdyenHelper = require('int_adyen_overlay/cartridge/scripts/util/AdyenHelper');
var AdyenGetOpenInvoiceData = require('int_adyen_overlay/cartridge/scripts/adyenGetOpenInvoiceData');

function execute(args) {
    return PIPELET_NEXT;  
}

function alternativePaymentMethod(args){
    var paymentMethodObject = {
        "type" : args.PaymentType
    };
   if(args.Issuer !== "undefined"){
        paymentMethodObject['issuer'] = args.Issuer;
    }

   var returnUrl = URLUtils.https('Adyen-ShowConfirmation').toString();
   return createPaymentRequest(args, paymentMethodObject, returnUrl); 
}

function creditCard(args) {
    try {
        var order = args.Order;
        if (order == null) {
            Logger.getLogger('Adyen').error('No order present.');
            return {error: true};
        }
        var paymentInstrument = args.PaymentInstrument;
        var saveCreditCard = args.SaveCreditCard;
        var customer = order.getCustomer();
        var profile = !empty(customer) && customer.registered && !empty(customer.getProfile()) ? customer.getProfile() : null;
        var customerID = '';
        if (!empty(profile) && !empty(profile.getCustomerNo())) {
            customerID = profile.getCustomerNo();
        }

        var recurringType = AdyenHelper.getAdyenRecurringType();
        var isOneClick = false;
        if (paymentInstrument.getCreditCardToken()) {
            isOneClick = true;
        }
        var paymentMethodObject = AdyenHelper.createCardObjectSF(isOneClick, 'billing');

        if (AdyenHelper.getAdyenRecurringPaymentsEnabled()) {
            if (!empty(paymentInstrument.getCreditCardToken()) && !empty(customerID)) {
                paymentMethodObject['recurringDetailReference'] = paymentInstrument.getCreditCardToken();
            }
            else if (!empty(recurringType) && saveCreditCard) {
                paymentMethodObject['storeDetails'] = true;
            }
        }
        var returnUrl = URLUtils.https('Adyen-OrderConfirm').toString();
        return createPaymentRequest(args, paymentMethodObject, returnUrl);

    }
    catch(e){
        Logger.getLogger("Adyen").error('error processing creditCard. Error message: ' + e.message + " more details: "+ e.toString() + ' in ' + e.fileName + ':' + e.lineNumber);
        return {error: true};
    }
}

function createPaymentRequest(args, paymentMethodObject, returnUrl) {
    var order = args.Order;
    var recurringType = "";
    var saveCreditCard = !empty(args.SaveCreditCard) ? args.SaveCreditCard : false;
    var jsonObject = AdyenHelper.createAdyenRequestObject(recurringType, order, saveCreditCard);
    var customer = order.getCustomer();
    var profile = !empty(customer) && customer.registered && !empty(customer.getProfile()) ? customer.getProfile() : null;
    var customerID = '';

    if (!empty(profile) && !empty(profile.getCustomerNo())) {
        customerID = profile.getCustomerNo();
    }

    jsonObject['returnUrl'] = returnUrl;
    jsonObject.additionalData = {
        "executeThreeD": true
    };

    var myAmount = AdyenHelper.getCurrencyValueForApi(args.Amount); //args.Amount * 100;
    jsonObject['amount'] = {
        'currency': args.Amount.currencyCode,
        'value': myAmount
    };

    var shippingAddr: OrderAddress = args.Order.defaultShipment.shippingAddress;
    var houseNumberShip;
    if (shippingAddr.address2) {
        houseNumberShip = shippingAddr.address2;
    }
    else {
        houseNumberShip = "N/A";
    }
    jsonObject["countryCode"] = shippingAddr.countryCode.value.toUpperCase();
    
    jsonObject.deliveryAddress = {
        "city": shippingAddr.city,
        "country": shippingAddr.countryCode.value.toUpperCase(),
        "houseNumberOrName": houseNumberShip,
        "postalCode": shippingAddr.postalCode,
        "stateOrProvince": (!empty(shippingAddr.stateCode) ? shippingAddr.stateCode : 'NA'),
        "street": shippingAddr.address1
    };

    var billingAddr: OrderAddress = args.Order.getBillingAddress();
    var houseNumberBill;
    if (billingAddr.address2) {
        houseNumberBill = billingAddr.address2;
    }
    else {
        houseNumberBill = "N/A";
    }
    jsonObject.billingAddress = {
        "city": billingAddr.city,
        "country": billingAddr.countryCode.value.toUpperCase(),
        "houseNumberOrName": houseNumberBill,
        "postalCode": billingAddr.postalCode,
        "stateOrProvince": (!empty(billingAddr.stateCode) ? billingAddr.stateCode : 'NA'),
        "street": billingAddr.address1
    };

    var shopperObject = AdyenHelper.createShopperObject({
            Customer: customer,
            Basket: order
        });

    jsonObject['paymentMethod'] = paymentMethodObject;
    var shopperDetails = {
        "firstName": billingAddr.firstName,
        "gender": "UNKNOWN",
        "infix": "",
        "lastName": billingAddr.lastName
    };

	if(!empty(args.PaymentType) && AdyenHelper.isOpenInvoiceMethod(args.PaymentType.toString())) {
        jsonObject["lineItems"] = AdyenGetOpenInvoiceData.getLineItems(args);
        if(args.ratePayFingerprint){
            jsonObject["dfValue"] = args.ratePayFingerprint;
        }
        if(args.adyenFingerprint){
            jsonObject["dfValue"] = args.adyenFingerprint
        }

        var personalDetails = AdyenGetOpenInvoiceData.getShopperData(args, shopperDetails);
        jsonObject['paymentMethod'].personalDetails = personalDetails;
    }
	else {
	    jsonObject['shopperName'] = shopperDetails;
    }

    var requestObject = AdyenHelper.extend(jsonObject, shopperObject);

    // assign default values for the script output variables 
    args.RedirectObject = '';
    args.ResultCode = '';
    args.AuthorizationCode = '';
    args.PspReference = '';
    args.PaymentStatus = '?';
    args.AuthorizationAmount = '';
    args.Decision = '';
    args.AdyenErrorMessage = '';

    // make API call
    return doPaymentCall(args, requestObject);
}

function doPaymentCall(args, requestObject){
    var errorMessage = '';
    try {
       var callResult = executeCall(AdyenHelper.SERVICE.PAYMENT, requestObject);
        if (callResult.isOk() == false){
            Logger.error('Adyen: Call error code' +  callResult.getError().toString() + ' Error => ResponseStatus: ' + callResult.getStatus()  + ' | ResponseErrorText: ' +  callResult.getErrorMessage() + ' | ResponseText: ' + callResult.getMsg());
            args.AdyenErrorMessage = dw.web.Resource.msg('confirm.error.declined','checkout', null);
            return {
                error: true,
                args: args
            };
        }
        var resultObject = callResult.object;
        var resultObj = {
            statusCode: resultObject.getStatusCode(),
            statusMessage: resultObject.getStatusMessage(),
            text: resultObject.getText(),
            errorText: resultObject.getErrorText(),
            timeout: resultObject.getTimeout()
        }

        var resultText = ('text' in resultObj && !empty(resultObj.text) ? resultObj.text : null);
        if (resultText == null) {
            return {error: true};
        }

        // build the response object
        var responseObj;
        try {
            responseObj = JSON.parse(resultText);
        } catch (ex) {
            Logger.error('error parsing response object ' + ex.message);
            return {error: true};
        }

        // return the AVS result code
        args.AVSResultCode = (!empty(responseObj.avsResultRaw) ? responseObj.avsResultRaw : '');

        // if the card is enrolled in the 3-D Secure programme the response should contain these 4 fields
        if ('redirect' in responseObj) {args.RedirectObject = responseObj.redirect;} // issuerUrl
        args.ResultCode = responseObj.resultCode; // resultCode

        args.PspReference = ('pspReference' in responseObj && !empty(responseObj.pspReference) ? responseObj.pspReference : '');
        args.PaymentStatus = resultObj.errorText;
        args.AuthorizationAmount = args.Amount.getValue().toFixed(2);
        args.AdyenAmount = requestObject["amount"].value;
        args.Decision = 'ERROR';

        var resultCode = args.ResultCode;
        var order = args.Order;

        if (responseObj.resultCode.indexOf('Authorised') != -1 || (responseObj.resultCode.indexOf('RedirectShopper') != -1) ) {
            args.Decision = 'ACCEPT';
            args.PaymentStatus = resultCode;
            args.PaymentData = responseObj.paymentData;
            // if 3D Secure is used, the statuses will be updated later
            if (responseObj.resultCode.indexOf('Authorised') != -1) {
                order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_PAID);
                order.setExportStatus(dw.order.Order.EXPORT_STATUS_READY);
            }
            Logger.getLogger('Adyen').info('Payment result: Authorised');
            Logger.getLogger('Adyen').info('Decision: ' + args.Decision);

            if (args.RedirectObject == '') { // if is not 3DSecure
                Logger.getLogger('Adyen').debug('Adyen: ' + resultObj.statusCode + ' Error => ' + resultObj.statusMessage + ' | ' + resultObj.errorText);
            }
        }
        else if(responseObj.resultCode.indexOf('Received') != -1) {
            args.Decision = 'PENDING';
            args.PaymentStatus = resultCode;
            if(responseObj.additionalData['bankTransfer.owner']){
                var bankTransferData = [{"key":"bankTransfer.description","value":"bankTransfer.description"}];
                for (var data in responseObj.additionalData){
                    if(data.indexOf('bankTransfer.') != -1) {
                        bankTransferData.push({
                            key: data,
                            value: responseObj.additionalData[data]
                        })
                    }
                }
                args.PaymentInstrument.custom.adyenAdditionalPaymentData = JSON.stringify(bankTransferData);
            }

            if(responseObj.additionalData['comprafacil.entity']){
                var multiBancoData = [{"key":"comprafacil.description","value":"comprafacil.description"}];
                for (var data in responseObj.additionalData){
                    if(data.indexOf('comprafacil.') != -1) {
                        multiBancoData.push({
                            key: data,
                            value: responseObj.additionalData[data]
                        })
                    }
                }
                args.PaymentInstrument.custom.adyenAdditionalPaymentData = JSON.stringify(multiBancoData);
            }

            order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_NOTPAID);
            order.setExportStatus(dw.order.Order.EXPORT_STATUS_NOTEXPORTED);
        }
        else  {
            args.PaymentStatus = 'Refused';
            args.Decision = 'REFUSED';

            order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_NOTPAID);
            order.setExportStatus(dw.order.Order.EXPORT_STATUS_NOTEXPORTED);

            errorMessage = dw.web.Resource.msg('confirm.error.declined','checkout', null);
            if ('refusalReason' in responseObj && !empty(responseObj.refusalReason)) {
                errorMessage += ' (' + responseObj.refusalReason + ')';
            }
            args.AdyenErrorMessage = errorMessage;
            Logger.getLogger('Adyen').info('Payment result: Refused');
        }
        return args;
    }
    catch (e) {
        Logger.getLogger('Adyen').fatal('Adyen: ' + e.toString() + ' in ' + e.fileName + ':' + e.lineNumber);
        return {error: true};
    }
}

function doPaymentDetailsCall(requestObject){
    var callResult = executeCall(AdyenHelper.SERVICE.PAYMENTDETAILS, requestObject);
    if (callResult.isOk() == false){
        Logger.error('Adyen: Call error code' +  callResult.getError().toString() + ' Error => ResponseStatus: ' + callResult.getStatus()  + ' | ResponseErrorText: ' +  callResult.getErrorMessage() + ' | ResponseText: ' + callResult.getMsg());
        return {
            error: true
        };
    }
    var resultObject = callResult.object;
    var resultObj = {
        statusCode: resultObject.getStatusCode(),
        statusMessage: resultObject.getStatusMessage(),
        text: resultObject.getText(),
        errorText: resultObject.getErrorText(),
        timeout: resultObject.getTimeout()
    }

    var resultText = ('text' in resultObj && !empty(resultObj.text) ? resultObj.text : null);
    if (resultText == null) {
        return {error: true};
    }

    // build the response object
    var responseObj;
    try {
        responseObj = JSON.parse(resultText);
    } catch (ex) {
        Logger.error('error parsing response object ' + ex.message);
        return {error: true};
    }

    return responseObj;
}

function executeCall(serviceType, requestObject){
    var service = AdyenHelper.getService(serviceType);
    if (service == null) {
        return {error: true};
    }
    var apiKey = AdyenHelper.getAdyenApiKey();
    service.addHeader('Content-type','application/json');
    service.addHeader('charset', 'UTF-8');
    service.addHeader('X-API-KEY', apiKey);
    var callResult = service.call(JSON.stringify(requestObject));
    return callResult;

}

module.exports = {
    'execute': execute,
    'creditCard': creditCard,
    'alternativePaymentMethod': alternativePaymentMethod,
    'doPaymentDetailsCall': doPaymentDetailsCall
}