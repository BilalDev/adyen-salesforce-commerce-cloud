/**
 *
 */
var dwsvc = require("dw/svc");
var dwnet = require("dw/net");
var dwsystem = require("dw/system");
var dwutil = require("dw/util");

var adyenCurrentSite = dwsystem.Site.getCurrent();
var __AdyenHelper: Object = {

    //service constants
    SERVICE: {
        PAYMENT: "AdyenPayment",
        PAYMENTDETAILS: "AdyenPaymentDetails",
        PAYMENT_3DSECURE: "AdyenPayment3DSecure",
        RECURRING: "AdyenRecurring",
        RECURRING_DISABLE: "AdyenRecurringDisable",
        PAYMENTMETHODS: "AdyenPaymentMethods",
        POSPAYMENT: "AdyenPosPayment",
        ORIGINKEYS: "AdyenOriginKeys",
        CHECKOUTPAYMENTMETHODS: "AdyenCheckoutPaymentMethods"
    },
    MODE: {
        TEST: "TEST",
        LIVE: "LIVE"
    },

    CSE_LIVE_URL: "https://live.adyen.com/hpp/cse/js/",
    CSE_TEST_URL: "https://test.adyen.com/hpp/cse/js/",
    ADYEN_LIVE_URL: "https://live.adyen.com/",
    ADYEN_TEST_URL: "https://test.adyen.com/",
    CSE_URL_EXTENSION: ".shtml",
    LOADING_CONTEXT_TEST: "https://checkoutshopper-test.adyen.com/checkoutshopper/",
    LOADING_CONTEXT_LIVE: "https://checkoutshopper-live.adyen.com/checkoutshopper/",

    VERSION: "18.3.0",

    getService: function (service: String): Object {
        // Create the service config (used for all services)
        var adyenService = null;

        try {
            var adyenService = dwsvc.LocalServiceRegistry.createService(service, {
                createRequest: function (svc: HTTPService, args) {
                    svc.setRequestMethod("POST");
                    if (args) {
                        return args;
                    } else {
                        return null;
                    }
                },
                parseResponse: function (svc: HTTPService, client: HTTPClient) {
                    return client;
                }
            });
            dwsystem.Logger.getLogger("Adyen", "adyen").debug("Successfully retrive service with name {0}", service);
        } catch (e) {
            var ex = e;
            dwsystem.Logger.getLogger("Adyen", "adyen").error("Can't get service instance with name {0}", service);
            //e.message
        }
        return adyenService;
    },

    getAdyenMode: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_Mode'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_Mode').value;
        }
        return returnValue;
    },

    getAdyenMerchantAccount: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_merchantCode'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_merchantCode');
        }
        return returnValue;
    },

    getAdyenUrl: function (): String {
        var returnValue: String = "";
        switch (__AdyenHelper.getAdyenMode()) {
            case __AdyenHelper.MODE.TEST:
                returnValue = __AdyenHelper.ADYEN_TEST_URL;
                break;
            case __AdyenHelper.MODE.LIVE:
                returnValue = __AdyenHelper.ADYEN_LIVE_URL;
                break;
        }
        return returnValue;
    },

    getCSEJsUrl: function (): String {
        var returnValue: String = "";
        switch (__AdyenHelper.getAdyenMode()) {
            case __AdyenHelper.MODE.TEST:
                returnValue = __AdyenHelper.CSE_TEST_URL + adyenCurrentSite.getCustomPreferenceValue('AdyenCseLibraryToken') + __AdyenHelper.CSE_URL_EXTENSION;
                break;
            case __AdyenHelper.MODE.LIVE:
                returnValue = __AdyenHelper.CSE_LIVE_URL + adyenCurrentSite.getCustomPreferenceValue('AdyenCseLibraryToken') + __AdyenHelper.CSE_URL_EXTENSION;
                break;
        }
        return returnValue;
    },

    getAdyenCseEnabled: function (): Boolean {
        var returnValue: Boolean = false;
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenCseEnabled'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenCseEnabled');
        }
        return returnValue;
    },

    getAdyenCseDateField: function () {
        var currentDate = new Date();
        return currentDate.toISOString();
    },

    getAdyenAVSEnabled: function (): Boolean {
        var returnValue: Boolean = false;
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_enableAVS'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_enableAVS');
        }
        return returnValue;
    },

    getAdyenRecurringPaymentsEnabled: function (): Boolean {
        var returnValue: Boolean = false;
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenRecurringPaymentsEnabled'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenRecurringPaymentsEnabled');
        }
        return returnValue;
    },

    getAdyenRecurringType: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_recurringType')) && !empty(__AdyenHelper.getAdyenRecurringPaymentsEnabled())) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_recurringType').getValue();
        }
        return returnValue;
    },

    getAdyenGuestRecurringEnabled: function (): Boolean {
        var returnValue: Boolean = false;
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenGuestRecurringEnabled'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenGuestRecurringEnabled');
        }
        return returnValue;
    },

    getAdyenPOIID: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_POIID'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_POIID');
        }
        return returnValue;
    },

    getAdyenApiKey: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_API_Key'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_API_Key');
        }
        return returnValue;
    },

    getCheckoutUrl: function (): String {
        var checkoutUrl = this.getLoadingContext() + "sdk/2.1.0/adyen.js";
        return checkoutUrl;
    },

    getLoadingContext: function (): String {
        var returnValue: String = "";
        switch (__AdyenHelper.getAdyenMode()) {
            case __AdyenHelper.MODE.TEST:
                returnValue = __AdyenHelper.LOADING_CONTEXT_TEST;
                break;
            case __AdyenHelper.MODE.LIVE:
                returnValue = __AdyenHelper.LOADING_CONTEXT_LIVE;
                break;
        }
        return returnValue;
    },

    getOpenInvoiceMethods: function (): Array {

        var returnArray: Array = [];
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_Open_Invoice_Whitelist'))) {
            returnArray = adyenCurrentSite.getCustomPreferenceValue('Adyen_Open_Invoice_Whitelist');
        }

        return returnArray;
    },

    hasCheckoutComponent: function (paymentMethod) {
        if (paymentMethod.indexOf("ideal") > -1 ||
            paymentMethod.indexOf("klarna") > -1 ||
            paymentMethod.indexOf("afterpay") > -1
        ) {
            return true;
        }
        return false;
    },

    /**
     * In the open invoice components we need to validate only the personal details and only the
     * dateOfBirth, telephoneNumber and gender if it's set in the admin
     * @param details
     * @returns {Array}
     */
    filterOutOpenInvoiceComponentDetails: function (details) {
        var methodDetailsObj = JSON.parse(details);

        var filteredDetails = methodDetailsObj.details.map(function (parentDetail) {
            if (parentDetail.key == "personalDetails") {
                var detailObject = parentDetail.details.map(function (detail) {
                    if (detail.key == 'dateOfBirth' ||
                        detail.key == 'telephoneNumber' ||
                        detail.key == 'gender') {
                        return detail;
                    }
                });

                if (!!detailObject) {
                    return {
                        "key": parentDetail.key,
                        "type": parentDetail.type,
                        "details": __AdyenHelper.filterUndefinedItemsInArray(detailObject)
                    };
                }
            }
        });

        methodDetailsObj = __AdyenHelper.filterUndefinedItemsInArray(filteredDetails);
        return JSON.stringify(methodDetailsObj);
    },
    /**
     * Helper function to filter out the undefined items from an array
     * @param arr
     * @returns {*}
     */
    filterUndefinedItemsInArray: function (arr) {
        return arr.filter(function (item) {
            return typeof item !== 'undefined';
        });
    },
    getRatePayID: function (): String {

        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenRatePayID'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenRatePayID');
        }
        return returnValue;
    },

    isOpenInvoiceMethod: function (paymentMethod) {
        if (paymentMethod.indexOf("afterpay") > -1 || paymentMethod.indexOf("klarna") > -1 || paymentMethod.indexOf("ratepay") > -1 || paymentMethod.indexOf("facilypay") > -1) {
            if (paymentMethod.indexOf("afterpaytouch") == -1) {
                return true;
            }
        }
        return false;
    },

    isMolpayMethod: function (paymentMethod) {
        if (paymentMethod.indexOf("molpay") > -1) {
            return true;
        }

        return false;
    },

    // Get saved card token of customer saved card based on matched cardUUID
    getCardToken: function (cardUUID, CustomerObj) {
        var token = '';
        if (!empty(CustomerObj) && CustomerObj.authenticated && !empty(cardUUID)) {
            var wallet = CustomerObj.getProfile().getWallet();
            var paymentInstruments = wallet.getPaymentInstruments(dw.order.PaymentInstrument.METHOD_CREDIT_CARD);
            var creditCardInstrument;
            var instrumentsIter = paymentInstruments.iterator();
            while (instrumentsIter.hasNext()) {
                creditCardInstrument = instrumentsIter.next();
                //find token ID exists for matching payment card
                if (creditCardInstrument.UUID.equals(cardUUID) && !empty(creditCardInstrument.getCreditCardToken())) {
                    token = creditCardInstrument.getCreditCardToken();
                    break;
                }
            }
        }
        return token;
    },

    createCardObject: function (params) {
        var card,
            cardObject = {},
            formType = !empty(params) && 'FormType' in params && !empty(params.FormType) ? params.FormType : 'billing',
            tokenID = !empty(params) && 'TokenID' in params && !empty(params.TokenID) ? params.TokenID : '';

        switch (formType) {
            case 'billing':
                var encryptedData;
                if (session.forms.billing.paymentMethods) {
                    card = session.forms.billing.paymentMethods.creditCard;
                    encryptedData = card.encrypteddata.value;
                } else {
                    //different form structure for SFRA
                    card = session.forms.billing.creditCardFields;
                    encryptedData = card.adyenEncryptedData.value;
                }

                if (__AdyenHelper.getAdyenCseEnabled() && !empty(encryptedData)) {
                    cardObject['additionalData'] = {
                        'card.encrypted.json': encryptedData
                    };
                } else {
                    cardObject['card'] = {
                        'number': card.number.value,
                        'expiryMonth': card.expiration.month.value,
                        'expiryYear': card.expiration.year.value,
                        'cvc': card.cvn.value,
                        'holderName': card.owner.value
                    };
                }
                break;
            case 'account':
                var encryptedData;
                if (session.forms.paymentinstruments) {
                    card = session.forms.paymentinstruments.creditcards.newcreditcard;
                    encryptedData = card.encrypteddata.value;
                } else {
                    //different form structure for SFRA
                    card = session.forms.creditCard;
                    encryptedData = card.adyenEncryptedData.value;
                }

                if (__AdyenHelper.getAdyenCseEnabled() && !empty(encryptedData)) {
                    cardObject['additionalData'] = {
                        'card.encrypted.json': encryptedData
                    };
                } else {
                    cardObject['card'] = {
                        'number': card.number.value,
                        'expiryMonth': card.expiration.month.value,
                        'expiryYear': card.expiration.year.value,
                        'cvc': card.cvn.value,
                        'holderName': card.owner.value
                    };
                }
                break;
        }

        return cardObject;
    },

    createCardObjectSF: function (isOneClick, formType) {
        var card;
        var cardType = "scheme";
        var paymentMethodObject = {};
        switch (formType) {
            case 'billing':
                if (session.forms.billing.paymentMethods) {
                    card = session.forms.billing.paymentMethods.creditCard;
                    paymentMethodObject['holderName'] = card.owner.value;
                    if (card.type.value) {
                        cardType = card.type.value;
                    }
                } else {
                    // structure for SFRA
                    card = session.forms.billing.creditCardFields;
                    if (card.cardType.value && isOneClick) {
                        cardType = __AdyenHelper.getAdyenCardType(card.cardType.value);
                    }
                    paymentMethodObject['holderName'] = card.cardOwner.value;
                }
                break;
            case 'account':
                if (session.forms.billing.paymentMethods.creditCard) {
                    card = session.forms.billing.paymentMethods.creditCard;
                } else {
                    card = session.forms.creditCard;
                }

                break;
        }

        if (card.adyenEncryptedSecurityCode.value) {
            paymentMethodObject['encryptedSecurityCode'] = card.adyenEncryptedSecurityCode.value;
        }

        paymentMethodObject['type'] = cardType;

        if (!isOneClick) {
            paymentMethodObject['encryptedCardNumber'] = card.adyenEncryptedCardNumber.value;
            paymentMethodObject['encryptedExpiryMonth'] = card.adyenEncryptedExpiryMonth.value;
            paymentMethodObject['encryptedExpiryYear'] = card.adyenEncryptedExpiryYear.value;
        }

        return paymentMethodObject;
    },

    createShopperObject: function (params) {
        var shopperObject = {};
        var customer = !empty(params) && 'Customer' in params && !empty(params.Customer) ? params.Customer : null;
        var basket = !empty(params) && 'Basket' in params && !empty(params.Basket) ? params.Basket : null;
        if (empty(customer) && !empty(basket)) {
            customer = basket.getCustomer();
        }
        var profile = !empty(customer) && customer.registered && !empty(customer.getProfile()) ? customer.getProfile() : null;

        var customerEmail = '';
        if (!empty(basket) && !empty(basket.customerEmail)) {
            customerEmail = basket.customerEmail;
        }
        if (empty(customerEmail) && !empty(profile) && !empty(profile.getEmail())) {
            customerEmail = profile.getEmail();
        }

        var customerID = '';
        if (!empty(profile) && !empty(profile.getCustomerNo())) {
            customerID = profile.getCustomerNo();
        } else {
            if (!empty(basket.getCustomerNo())) {
                customerID = basket.getCustomerNo();
            }
        }

        var shopperIP = !empty(request) && !empty(request.getHttpRemoteAddress()) ? request.getHttpRemoteAddress() : '';

        if (!empty(shopperIP)) {
            shopperObject['shopperIP'] = shopperIP;
        }

        if (!empty(customerEmail)) {
            shopperObject['shopperEmail'] = customerEmail;
        }

        if (!empty(customerID)) {
            shopperObject['shopperReference'] = customerID;
        }

        return shopperObject;
    },

    createAdyenRequestObject: function (recurringType, order, saveCreditCard) {
        var jsonObject = {},
            reference = '';

        if (order && !empty(order.getOrderNo())) {
            reference = order.getOrderNo();
        } else {
            reference = 'recurringPayment-account';
        }

        jsonObject['merchantAccount'] = __AdyenHelper.getAdyenMerchantAccount();
        jsonObject['reference'] = reference;
        jsonObject['browserInfo'] = {
            'acceptHeader': request.httpHeaders.get('accept') + request.httpHeaders.get('accept-encoding'),
            'userAgent': request.httpUserAgent
        };

        if (__AdyenHelper.getAdyenRecurringPaymentsEnabled() && !empty(recurringType)) {

            if (saveCreditCard) {
                jsonObject['recurring'] = {
                    'contract': recurringType
                };
            } else {
                // if save credit card hasn't been selected or guest order
                if (__AdyenHelper.getAdyenGuestRecurringEnabled()) {
                    jsonObject['recurring'] = {
                        'contract': 'RECURRING'
                    };
                }

            }
        }

        jsonObject['applicationInfo'] = __AdyenHelper.getApplicationInfo();

        return jsonObject;
    },

    createRecurringPaymentAccount: function (params) {
        var tokenID = '',
            pspReference = '';

        var recurringType = __AdyenHelper.getAdyenRecurringType();

        var jsonObject = __AdyenHelper.createAdyenRequestObject(recurringType, null, true);

        var paymentMethodObject = __AdyenHelper.createCardObjectSF(false, 'account');
        jsonObject['paymentMethod'] = paymentMethodObject;

        jsonObject['enableOneClick'] = true;
        jsonObject['paymentMethod'].storeDetails = true;

        var shopperObject = __AdyenHelper.createShopperObject({
            Customer: params.Customer
        });

        jsonObject['amount'] = {
            'currency': session.currency.currencyCode,
            'value': 0
        };

        var requestObject = __AdyenHelper.extend(jsonObject, shopperObject);
        var CreateRecurringPayment = require('int_adyen_overlay/cartridge/scripts/adyenCreateRecurringPayment.ds');
        var createRecurringPaymentResult = CreateRecurringPayment.createRecurringPayment({RequestObject: requestObject});

        if (createRecurringPaymentResult === PIPELET_ERROR || createRecurringPaymentResult.Decision == 'ERROR') {
            return {
                error: true
            };
        }

        if (createRecurringPaymentResult.Decision == 'ACCEPT' && ('PspReference' in createRecurringPaymentResult) && !empty(createRecurringPaymentResult.PspReference)) {
            pspReference = createRecurringPaymentResult.PspReference;
            var GetRecurringDetailsList = require('int_adyen_overlay/cartridge/scripts/adyenGetRecurringDetailsList.ds');
            var getRecurringDetailsListResult = GetRecurringDetailsList.getRecurringDetailsList({
                Customer: params.Customer
            });

            if (getRecurringDetailsListResult === PIPELET_ERROR) {
                return {
                    error: true
                };
            }

            var paymentsMap = getRecurringDetailsListResult.RecurringPayments;
            if (paymentsMap != null && !paymentsMap.isEmpty() && paymentsMap.containsKey(pspReference)) {
                var details = !empty(paymentsMap.get(pspReference)) ? paymentsMap.get(pspReference) : null;
                tokenID = !empty(details) && ('recurringDetailReference' in details) && !empty(details.recurringDetailReference) ? details.recurringDetailReference : '';
            }

            return {
                ok: true,
                PspReference: pspReference,
                PaymentsMap: paymentsMap,
                TokenID: tokenID
            };
        }

        return {error: true};
    },

    extend: function (obj, src) {
        for (var key in src) {
            if (src.hasOwnProperty(key)) obj[key] = src[key];
        }
        return obj;
    },

    getAdyenCardType: function (cardType) {
        if (!empty(cardType)) {
            switch (cardType) {
                case 'Visa':
                    cardType = 'visa';
                    break;
                case 'Master':
                case 'MasterCard':
                case 'Mastercard':
                    cardType = 'mc';
                    break;
                case 'Amex':
                    cardType = 'amex';
                    break;
                case 'Discover':
                    cardType = 'discover';
                    break;
                case 'Maestro':
                    cardType = 'maestro';
                    break;
                case 'Diners':
                    cardType = 'diners';
                    break;
                case 'Bancontact':
                    cardType = 'bcmc';
                    break;
                default:
                    cardType = cardType.toLowerCase();
                    break;
            }
        } else {
            throw new Error('cardType argument is not passed to getAdyenCardType function');
        }

        return cardType;
    },

    getSFCCCardType: function (cardType) {
        if (!empty(cardType)) {
            switch (cardType) {
                case 'visa':
                    cardType = 'Visa';
                    break;
                case 'mc':
                    cardType = 'Mastercard';
                    break;
                case 'amex':
                    cardType = 'Amex';
                    break;
                case 'discover':
                    cardType = 'Discover';
                    break;
                case 'maestro':
                case 'maestrouk':
                    cardType = 'Maestro';
                    break;
                case 'diners':
                    cardType = 'Diners';
                    break;
                case 'bcmc':
                    cardType = 'Bancontact';
                    break;
                default:
                    cardType = '';
                    break;
            }
            return cardType;
        } else {
            throw new Error('cardType argument is not passed to getSFCCCardType function');
        }
    },
    getAdyenOrderPaymentInstrument: function (order: dw.order.Order) {
        var adyenOrderPaymentInstrument = null;
        if (order) {
            var paymentInstruments: dw.util.Collection = order.getPaymentInstruments();
            for each(let paymentInstrument in paymentInstruments
        )
            {
                let paymentProcessor = paymentInstrument.getPaymentTransaction().getPaymentProcessor();
                let paymentProcessorID = paymentProcessor ? paymentProcessor.getID() : paymentInstrument.getPaymentMethod();
                if (paymentProcessorID.equals("Adyen") || paymentProcessorID.equals("ADYEN_CREDIT")) {
                    adyenOrderPaymentInstrument = paymentInstrument;
                    break;
                }
            }
        }

        return adyenOrderPaymentInstrument;
    },


    saveAuthResponseAttributes: function (transaction: dw.order.PaymentTransaction, map: dw.web.HttpParameterMap) {
        transaction.custom.Adyen_authResult = map.isParameterSubmitted('authResult') ? map.authResult.stringValue : '';
        transaction.custom.Adyen_merchantReference = map.isParameterSubmitted('merchantReference') ? map.merchantReference.stringValue : '';
        transaction.custom.Adyen_paymentMethod = map.isParameterSubmitted('paymentMethod') ? map.paymentMethod.stringValue : '';
        transaction.custom.Adyen_pspReference = map.isParameterSubmitted('pspReference') ? map.pspReference.stringValue : '';
        transaction.custom.Adyen_shopperLocale = map.isParameterSubmitted('shopperLocale') ? map.shopperLocale.stringValue : '';
        transaction.custom.Adyen_skinCode = map.isParameterSubmitted('skinCode') ? map.skinCode.stringValue : '';
        transaction.custom.Adyen_merchantSig = map.isParameterSubmitted('merchantSig') ? map.merchantSig.stringValue : '';
        transaction.custom.Adyen_merchantReturnData = map.isParameterSubmitted('merchantReturnData') ? map.merchantReturnData.stringValue : '';

    },

    getCurrencyValueForApi: function (amount): String {
        var currencyCode = dwutil.Currency.getCurrency(amount.currencyCode);
        var digitsNumber = __AdyenHelper.getFractionDigits(currencyCode.toString());
        return Math.round(amount.multiply(Math.pow(10, digitsNumber)).value);
    },

    getFractionDigits: function (currencyCode): Number {
        var format;
        switch (currencyCode) {
            case "JPY":
            case "IDR":
            case "KRW":
            case "BYR":
            case "VND":
            case "CVE":
            case "DJF":
            case "GNF":
            case "PYG":
            case "RWF":
            case "UGX":
            case "VUV":
            case "XAF":
            case "XOF":
            case "XPF":
            case "GHC":
            case "KMF":
                format = 0;
                break;
            case "MRO":
                format = 1;
                break;
            case "BHD":
            case "JOD":
            case "KWD":
            case "OMR":
            case "LYD":
            case "TND":
                format = 3;
                break;
            default:
                format = 2;
                break;
        }
        return format;
    },

    getApplicationInfo: function () {

        var externalPlatformVersion = "";

        try {
            // AdyenController can be coming either from int_adyen_controllers or int_adyen_SFRA, depending on the cartridge path
            var AdyenController = require('*/cartridge/controllers/Adyen.js');
            externalPlatformVersion = AdyenController.getExternalPlatformVersion;
        } catch (e) {
        }

        var applicationInfo = {
            "adyenPaymentSource": {
                "name": "adyen-salesforce-commerce-cloud",
                "version": __AdyenHelper.VERSION
            },
            "externalPlatform": {
                "name": "SalesforceCommerceCloud",
                "version": externalPlatformVersion
            }
        };

        return applicationInfo;
    }
}

function pad(num) {
    if (num < 10) {
        return '0' + num;
    }
    return num;
}

module.exports = __AdyenHelper;